<<<<<<< HEAD
import toDate from "../toDate/index.js";
import requiredArgs from "../_lib/requiredArgs/index.js";
=======
import toDate from '../toDate/index.js';
import requiredArgs from '../_lib/requiredArgs/index.js';
>>>>>>> f65d1c32 (Fix all bugs)
/**
 * @name closestTo
 * @category Common Helpers
 * @summary Return a date from the array closest to the given date.
 *
 * @description
 * Return a date from the array closest to the given date.
 *
<<<<<<< HEAD
 * @param {Date | Number} dateToCompare - the date to compare with
 * @param {Array<Date> | Array<number>} datesArray - the array to search
 * @returns {Date | undefined} the date from the array closest to the given date or undefined if no valid value is given
=======
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * - Now, `closestTo` doesn't throw an exception
 *   when the second argument is not an array, and returns Invalid Date instead.
 *
 * @param {Date|Number} dateToCompare - the date to compare with
 * @param {Date[]|Number[]} datesArray - the array to search
 * @returns {Date} the date from the array closest to the given date
>>>>>>> f65d1c32 (Fix all bugs)
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Which date is closer to 6 September 2015: 1 January 2000 or 1 January 2030?
<<<<<<< HEAD
 * const dateToCompare = new Date(2015, 8, 6)
 * const result = closestTo(dateToCompare, [
=======
 * var dateToCompare = new Date(2015, 8, 6)
 * var result = closestTo(dateToCompare, [
>>>>>>> f65d1c32 (Fix all bugs)
 *   new Date(2000, 0, 1),
 *   new Date(2030, 0, 1)
 * ])
 * //=> Tue Jan 01 2030 00:00:00
 */

export default function closestTo(dirtyDateToCompare, dirtyDatesArray) {
  requiredArgs(2, arguments);
  var dateToCompare = toDate(dirtyDateToCompare);
<<<<<<< HEAD
  if (isNaN(Number(dateToCompare))) return new Date(NaN);
=======

  if (isNaN(dateToCompare)) {
    return new Date(NaN);
  }

>>>>>>> f65d1c32 (Fix all bugs)
  var timeToCompare = dateToCompare.getTime();
  var datesArray; // `dirtyDatesArray` is undefined or null

  if (dirtyDatesArray == null) {
    datesArray = []; // `dirtyDatesArray` is Array, Set or Map, or object with custom `forEach` method
  } else if (typeof dirtyDatesArray.forEach === 'function') {
    datesArray = dirtyDatesArray; // If `dirtyDatesArray` is Array-like Object, convert to Array. Otherwise, make it empty Array
  } else {
    datesArray = Array.prototype.slice.call(dirtyDatesArray);
  }

  var result;
  var minDistance;
  datesArray.forEach(function (dirtyDate) {
    var currentDate = toDate(dirtyDate);

<<<<<<< HEAD
    if (isNaN(Number(currentDate))) {
=======
    if (isNaN(currentDate)) {
>>>>>>> f65d1c32 (Fix all bugs)
      result = new Date(NaN);
      minDistance = NaN;
      return;
    }

    var distance = Math.abs(timeToCompare - currentDate.getTime());

<<<<<<< HEAD
    if (result == null || distance < Number(minDistance)) {
=======
    if (result == null || distance < minDistance) {
>>>>>>> f65d1c32 (Fix all bugs)
      result = currentDate;
      minDistance = distance;
    }
  });
  return result;
}