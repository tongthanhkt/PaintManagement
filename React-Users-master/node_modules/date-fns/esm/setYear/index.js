<<<<<<< HEAD
import toInteger from "../_lib/toInteger/index.js";
import toDate from "../toDate/index.js";
import requiredArgs from "../_lib/requiredArgs/index.js";
=======
import toInteger from '../_lib/toInteger/index.js';
import toDate from '../toDate/index.js';
import requiredArgs from '../_lib/requiredArgs/index.js';
>>>>>>> f65d1c32 (Fix all bugs)
/**
 * @name setYear
 * @category Year Helpers
 * @summary Set the year to the given date.
 *
 * @description
 * Set the year to the given date.
 *
<<<<<<< HEAD
=======
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
>>>>>>> f65d1c32 (Fix all bugs)
 * @param {Date|Number} date - the date to be changed
 * @param {Number} year - the year of the new date
 * @returns {Date} the new date with the year set
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Set year 2013 to 1 September 2014:
<<<<<<< HEAD
 * const result = setYear(new Date(2014, 8, 1), 2013)
=======
 * var result = setYear(new Date(2014, 8, 1), 2013)
>>>>>>> f65d1c32 (Fix all bugs)
 * //=> Sun Sep 01 2013 00:00:00
 */

export default function setYear(dirtyDate, dirtyYear) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var year = toInteger(dirtyYear); // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date

<<<<<<< HEAD
  if (isNaN(date.getTime())) {
=======
  if (isNaN(date)) {
>>>>>>> f65d1c32 (Fix all bugs)
    return new Date(NaN);
  }

  date.setFullYear(year);
  return date;
}