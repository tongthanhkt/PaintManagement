<<<<<<< HEAD
import toDate from "../toDate/index.js";
import isLeapYear from "../isLeapYear/index.js";
import requiredArgs from "../_lib/requiredArgs/index.js";
=======
import toDate from '../toDate/index.js';
import isLeapYear from '../isLeapYear/index.js';
import requiredArgs from '../_lib/requiredArgs/index.js';
>>>>>>> f65d1c32 (Fix all bugs)
/**
 * @name getDaysInYear
 * @category Year Helpers
 * @summary Get the number of days in a year of the given date.
 *
 * @description
 * Get the number of days in a year of the given date.
 *
<<<<<<< HEAD
=======
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
>>>>>>> f65d1c32 (Fix all bugs)
 * @param {Date|Number} date - the given date
 * @returns {Number} the number of days in a year
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // How many days are in 2012?
<<<<<<< HEAD
 * const result = getDaysInYear(new Date(2012, 0, 1))
=======
 * var result = getDaysInYear(new Date(2012, 0, 1))
>>>>>>> f65d1c32 (Fix all bugs)
 * //=> 366
 */

export default function getDaysInYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);

<<<<<<< HEAD
  if (String(new Date(date)) === 'Invalid Date') {
=======
  if (isNaN(date)) {
>>>>>>> f65d1c32 (Fix all bugs)
    return NaN;
  }

  return isLeapYear(date) ? 366 : 365;
}