<<<<<<< HEAD
import toDate from "../toDate/index.js";
import differenceInCalendarMonths from "../differenceInCalendarMonths/index.js";
import compareAsc from "../compareAsc/index.js";
import requiredArgs from "../_lib/requiredArgs/index.js";
import isLastDayOfMonth from "../isLastDayOfMonth/index.js";
=======
import toDate from '../toDate/index.js';
import differenceInCalendarMonths from '../differenceInCalendarMonths/index.js';
import compareAsc from '../compareAsc/index.js';
import requiredArgs from '../_lib/requiredArgs/index.js';
>>>>>>> f65d1c32 (Fix all bugs)
/**
 * @name differenceInMonths
 * @category Month Helpers
 * @summary Get the number of full months between the given dates.
 *
 * @description
<<<<<<< HEAD
 * Get the number of full months between the given dates using trunc as a default rounding method.
=======
 * Get the number of full months between the given dates.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
>>>>>>> f65d1c32 (Fix all bugs)
 *
 * @param {Date|Number} dateLeft - the later date
 * @param {Date|Number} dateRight - the earlier date
 * @returns {Number} the number of full months
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // How many full months are between 31 January 2014 and 1 September 2014?
<<<<<<< HEAD
 * const result = differenceInMonths(new Date(2014, 8, 1), new Date(2014, 0, 31))
=======
 * var result = differenceInMonths(new Date(2014, 8, 1), new Date(2014, 0, 31))
>>>>>>> f65d1c32 (Fix all bugs)
 * //=> 7
 */

export default function differenceInMonths(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  var sign = compareAsc(dateLeft, dateRight);
  var difference = Math.abs(differenceInCalendarMonths(dateLeft, dateRight));
<<<<<<< HEAD
  var result; // Check for the difference of less than month

  if (difference < 1) {
    result = 0;
  } else {
    if (dateLeft.getMonth() === 1 && dateLeft.getDate() > 27) {
      // This will check if the date is end of Feb and assign a higher end of month date
      // to compare it with Jan
      dateLeft.setDate(30);
    }

    dateLeft.setMonth(dateLeft.getMonth() - sign * difference); // Math.abs(diff in full months - diff in calendar months) === 1 if last calendar month is not full
    // If so, result must be decreased by 1 in absolute value

    var isLastMonthNotFull = compareAsc(dateLeft, dateRight) === -sign; // Check for cases of one full calendar month

    if (isLastDayOfMonth(toDate(dirtyDateLeft)) && difference === 1 && compareAsc(dirtyDateLeft, dateRight) === 1) {
      isLastMonthNotFull = false;
    }

    result = sign * (difference - Number(isLastMonthNotFull));
  } // Prevent negative zero

=======
  dateLeft.setMonth(dateLeft.getMonth() - sign * difference); // Math.abs(diff in full months - diff in calendar months) === 1 if last calendar month is not full
  // If so, result must be decreased by 1 in absolute value

  var isLastMonthNotFull = compareAsc(dateLeft, dateRight) === -sign;
  var result = sign * (difference - isLastMonthNotFull); // Prevent negative zero
>>>>>>> f65d1c32 (Fix all bugs)

  return result === 0 ? 0 : result;
}