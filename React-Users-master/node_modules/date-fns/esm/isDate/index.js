<<<<<<< HEAD
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

import requiredArgs from "../_lib/requiredArgs/index.js";
=======
import requiredArgs from '../_lib/requiredArgs/index.js';
>>>>>>> f65d1c32 (Fix all bugs)
/**
 * @name isDate
 * @category Common Helpers
 * @summary Is the given value a date?
 *
 * @description
 * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.
 *
<<<<<<< HEAD
=======
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
>>>>>>> f65d1c32 (Fix all bugs)
 * @param {*} value - the value to check
 * @returns {boolean} true if the given value is a date
 * @throws {TypeError} 1 arguments required
 *
 * @example
 * // For a valid date:
<<<<<<< HEAD
 * const result = isDate(new Date())
=======
 * var result = isDate(new Date())
>>>>>>> f65d1c32 (Fix all bugs)
 * //=> true
 *
 * @example
 * // For an invalid date:
<<<<<<< HEAD
 * const result = isDate(new Date(NaN))
=======
 * var result = isDate(new Date(NaN))
>>>>>>> f65d1c32 (Fix all bugs)
 * //=> true
 *
 * @example
 * // For some value:
<<<<<<< HEAD
 * const result = isDate('2014-02-31')
=======
 * var result = isDate('2014-02-31')
>>>>>>> f65d1c32 (Fix all bugs)
 * //=> false
 *
 * @example
 * // For an object:
<<<<<<< HEAD
 * const result = isDate({})
=======
 * var result = isDate({})
>>>>>>> f65d1c32 (Fix all bugs)
 * //=> false
 */

export default function isDate(value) {
  requiredArgs(1, arguments);
<<<<<<< HEAD
  return value instanceof Date || _typeof(value) === 'object' && Object.prototype.toString.call(value) === '[object Date]';
=======
  return value instanceof Date || typeof value === 'object' && Object.prototype.toString.call(value) === '[object Date]';
>>>>>>> f65d1c32 (Fix all bugs)
}