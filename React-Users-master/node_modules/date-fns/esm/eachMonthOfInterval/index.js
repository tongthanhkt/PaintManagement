<<<<<<< HEAD
import toDate from "../toDate/index.js";
import requiredArgs from "../_lib/requiredArgs/index.js";
=======
import toDate from '../toDate/index.js';
import requiredArgs from '../_lib/requiredArgs/index.js';
>>>>>>> f65d1c32 (Fix all bugs)
/**
 * @name eachMonthOfInterval
 * @category Interval Helpers
 * @summary Return the array of months within the specified time interval.
 *
 * @description
 * Return the array of months within the specified time interval.
 *
<<<<<<< HEAD
 * @param {Interval} interval - the interval. See [Interval]{@link https://date-fns.org/docs/Interval}
=======
 * @param {Interval} interval - the interval. See [Interval]{@link docs/types/Interval}
>>>>>>> f65d1c32 (Fix all bugs)
 * @returns {Date[]} the array with starts of months from the month of the interval start to the month of the interval end
 * @throws {TypeError} 1 argument required
 * @throws {RangeError} The start of an interval cannot be after its end
 * @throws {RangeError} Date in interval cannot be `Invalid Date`
 *
 * @example
 * // Each month between 6 February 2014 and 10 August 2014:
<<<<<<< HEAD
 * const result = eachMonthOfInterval({
=======
 * var result = eachMonthOfInterval({
>>>>>>> f65d1c32 (Fix all bugs)
 *   start: new Date(2014, 1, 6),
 *   end: new Date(2014, 7, 10)
 * })
 * //=> [
 * //   Sat Feb 01 2014 00:00:00,
 * //   Sat Mar 01 2014 00:00:00,
 * //   Tue Apr 01 2014 00:00:00,
 * //   Thu May 01 2014 00:00:00,
 * //   Sun Jun 01 2014 00:00:00,
 * //   Tue Jul 01 2014 00:00:00,
 * //   Fri Aug 01 2014 00:00:00
 * // ]
 */

export default function eachMonthOfInterval(dirtyInterval) {
  requiredArgs(1, arguments);
  var interval = dirtyInterval || {};
  var startDate = toDate(interval.start);
  var endDate = toDate(interval.end);
<<<<<<< HEAD
  var endTime = endDate.getTime();
  var dates = []; // Throw an exception if start date is after end date or if any date is `Invalid Date`
=======
  var endTime = endDate.getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`
>>>>>>> f65d1c32 (Fix all bugs)

  if (!(startDate.getTime() <= endTime)) {
    throw new RangeError('Invalid interval');
  }

<<<<<<< HEAD
=======
  var dates = [];
>>>>>>> f65d1c32 (Fix all bugs)
  var currentDate = startDate;
  currentDate.setHours(0, 0, 0, 0);
  currentDate.setDate(1);

  while (currentDate.getTime() <= endTime) {
    dates.push(toDate(currentDate));
    currentDate.setMonth(currentDate.getMonth() + 1);
  }

  return dates;
}