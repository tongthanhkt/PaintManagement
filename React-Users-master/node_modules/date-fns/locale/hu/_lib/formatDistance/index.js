"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
<<<<<<< HEAD
exports.default = void 0;
=======
exports.default = formatDistance;
>>>>>>> f65d1c32 (Fix all bugs)
var translations = {
  about: 'körülbelül',
  over: 'több mint',
  almost: 'majdnem',
  lessthan: 'kevesebb mint'
};
<<<<<<< HEAD
var withoutSuffixes = {
  xseconds: ' másodperc',
  halfaminute: 'fél perc',
  xminutes: ' perc',
  xhours: ' óra',
  xdays: ' nap',
  xweeks: ' hét',
  xmonths: ' hónap',
  xyears: ' év'
};
var withSuffixes = {
  xseconds: {
    '-1': ' másodperccel ezelőtt',
    '1': ' másodperc múlva',
    '0': ' másodperce'
  },
  halfaminute: {
    '-1': 'fél perccel ezelőtt',
    '1': 'fél perc múlva',
    '0': 'fél perce'
  },
  xminutes: {
    '-1': ' perccel ezelőtt',
    '1': ' perc múlva',
    '0': ' perce'
  },
  xhours: {
    '-1': ' órával ezelőtt',
    '1': ' óra múlva',
    '0': ' órája'
  },
  xdays: {
    '-1': ' nappal ezelőtt',
    '1': ' nap múlva',
    '0': ' napja'
  },
  xweeks: {
    '-1': ' héttel ezelőtt',
    '1': ' hét múlva',
    '0': ' hete'
  },
  xmonths: {
    '-1': ' hónappal ezelőtt',
    '1': ' hónap múlva',
    '0': ' hónapja'
  },
  xyears: {
    '-1': ' évvel ezelőtt',
    '1': ' év múlva',
    '0': ' éve'
  }
};

var formatDistance = function formatDistance(token, count, options) {
  var adverb = token.match(/about|over|almost|lessthan/i);
  var unit = adverb ? token.replace(adverb[0], '') : token;
  var addSuffix = (options === null || options === void 0 ? void 0 : options.addSuffix) === true;
  var key = unit.toLowerCase();
  var comparison = (options === null || options === void 0 ? void 0 : options.comparison) || 0;
  var translated = addSuffix ? withSuffixes[key][comparison] : withoutSuffixes[key];
  var result = key === 'halfaminute' ? translated : count + translated;

  if (adverb) {
    var adv = adverb[0].toLowerCase();
    result = translations[adv] + ' ' + result;
  }

  return result;
};

var _default = formatDistance;
exports.default = _default;
=======

function translate(number, addSuffix, key, comparison) {
  var num = number;

  switch (key) {
    case 'xseconds':
      if (comparison === -1 && addSuffix) return num + ' másodperccel ezelőtt';
      if (comparison === -1 && !addSuffix) return num + ' másodperce';
      if (comparison === 1) return num + ' másodperc múlva';
      return num + ' másodperc';

    case 'halfaminute':
      if (comparison === -1 && addSuffix) return 'fél perccel ezelőtt';
      if (comparison === -1 && !addSuffix) return 'fél perce';
      if (comparison === 1) return 'fél perc múlva';
      return 'fél perc';

    case 'xminutes':
      if (comparison === -1 && addSuffix) return num + ' perccel ezelőtt';
      if (comparison === -1 && !addSuffix) return num + ' perce';
      if (comparison === 1) return num + ' perc múlva';
      return num + ' perc';

    case 'xhours':
      if (comparison === -1 && addSuffix) return num + ' órával ezelőtt';
      if (comparison === -1 && !addSuffix) return num + ' órája';
      if (comparison === 1) return num + ' óra múlva';
      return num + ' óra';

    case 'xdays':
      if (comparison === -1 && addSuffix) return num + ' nappal ezelőtt';
      if (comparison === -1 && !addSuffix) return num + ' napja';
      if (comparison === 1) return num + ' nap múlva';
      return num + ' nap';

    case 'xmonths':
      if (comparison === -1 && addSuffix) return num + ' hónappal ezelőtt';
      if (comparison === -1 && !addSuffix) return num + ' hónapja';
      if (comparison === 1) return num + ' hónap múlva';
      return num + ' hónap';

    case 'xyears':
      if (comparison === -1 && addSuffix) return num + ' évvel ezelőtt';
      if (comparison === -1 && !addSuffix) return num + ' éve';
      if (comparison === 1) return num + ' év múlva';
      return num + ' év';
  }

  return '';
}

function formatDistance(token, count, options) {
  options = options || {};
  var adverb = token.match(/about|over|almost|lessthan/i);
  var unit = token.replace(adverb, '');
  var result;
  result = translate(count, options.addSuffix, unit.toLowerCase(), options.comparison);

  if (adverb) {
    result = translations[adverb[0].toLowerCase()] + ' ' + result;
  }

  return result;
}

>>>>>>> f65d1c32 (Fix all bugs)
module.exports = exports.default;