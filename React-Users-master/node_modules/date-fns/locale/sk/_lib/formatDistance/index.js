"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
<<<<<<< HEAD
exports.default = void 0;

function declensionGroup(scheme, count) {
  if (count === 1 && scheme.one) {
    return scheme.one;
  }

  if (count >= 2 && count <= 4 && scheme.twoFour) {
=======
exports.default = formatDistance;

// NOTE: should prolly be improved
// https://www.unicode.org/cldr/charts/32/summary/sk.html?hide#1308
function declensionGroup(scheme, count) {
  if (count === 1) {
    return scheme.one;
  }

  if (count >= 2 && count <= 4) {
>>>>>>> f65d1c32 (Fix all bugs)
    return scheme.twoFour;
  } // if count === null || count === 0 || count >= 5


  return scheme.other;
}

function declension(scheme, count, time) {
  var group = declensionGroup(scheme, count);
<<<<<<< HEAD
  var finalText = group[time];
  return finalText.replace('{{count}}', String(count));
=======
  var finalText = group[time] || group;
  return finalText.replace('{{count}}', count);
>>>>>>> f65d1c32 (Fix all bugs)
}

function extractPreposition(token) {
  var result = ['lessThan', 'about', 'over', 'almost'].filter(function (preposition) {
    return !!token.match(new RegExp('^' + preposition));
  });
  return result[0];
}

function prefixPreposition(preposition) {
  var translation = '';

  if (preposition === 'almost') {
    translation = 'takmer';
  }

  if (preposition === 'about') {
    translation = 'približne';
  }

  return translation.length > 0 ? translation + ' ' : '';
}

function suffixPreposition(preposition) {
  var translation = '';

  if (preposition === 'lessThan') {
    translation = 'menej než';
  }

  if (preposition === 'over') {
    translation = 'viac než';
  }

  return translation.length > 0 ? translation + ' ' : '';
}

function lowercaseFirstLetter(string) {
  return string.charAt(0).toLowerCase() + string.slice(1);
}

var formatDistanceLocale = {
  xSeconds: {
    one: {
<<<<<<< HEAD
      present: 'sekunda',
=======
      regular: 'sekunda',
>>>>>>> f65d1c32 (Fix all bugs)
      past: 'sekundou',
      future: 'sekundu'
    },
    twoFour: {
<<<<<<< HEAD
      present: '{{count}} sekundy',
=======
      regular: '{{count}} sekundy',
>>>>>>> f65d1c32 (Fix all bugs)
      past: '{{count}} sekundami',
      future: '{{count}} sekundy'
    },
    other: {
<<<<<<< HEAD
      present: '{{count}} sekúnd',
=======
      regular: '{{count}} sekúnd',
>>>>>>> f65d1c32 (Fix all bugs)
      past: '{{count}} sekundami',
      future: '{{count}} sekúnd'
    }
  },
  halfAMinute: {
    other: {
<<<<<<< HEAD
      present: 'pol minúty',
=======
      regular: 'pol minúty',
>>>>>>> f65d1c32 (Fix all bugs)
      past: 'pol minútou',
      future: 'pol minúty'
    }
  },
  xMinutes: {
    one: {
<<<<<<< HEAD
      present: 'minúta',
=======
      regular: 'minúta',
>>>>>>> f65d1c32 (Fix all bugs)
      past: 'minútou',
      future: 'minútu'
    },
    twoFour: {
<<<<<<< HEAD
      present: '{{count}} minúty',
=======
      regular: '{{count}} minúty',
>>>>>>> f65d1c32 (Fix all bugs)
      past: '{{count}} minútami',
      future: '{{count}} minúty'
    },
    other: {
<<<<<<< HEAD
      present: '{{count}} minút',
=======
      regular: '{{count}} minút',
>>>>>>> f65d1c32 (Fix all bugs)
      past: '{{count}} minútami',
      future: '{{count}} minút'
    }
  },
  xHours: {
    one: {
<<<<<<< HEAD
      present: 'hodina',
=======
      regular: 'hodina',
>>>>>>> f65d1c32 (Fix all bugs)
      past: 'hodinou',
      future: 'hodinu'
    },
    twoFour: {
<<<<<<< HEAD
      present: '{{count}} hodiny',
=======
      regular: '{{count}} hodiny',
>>>>>>> f65d1c32 (Fix all bugs)
      past: '{{count}} hodinami',
      future: '{{count}} hodiny'
    },
    other: {
<<<<<<< HEAD
      present: '{{count}} hodín',
=======
      regular: '{{count}} hodín',
>>>>>>> f65d1c32 (Fix all bugs)
      past: '{{count}} hodinami',
      future: '{{count}} hodín'
    }
  },
  xDays: {
    one: {
<<<<<<< HEAD
      present: 'deň',
=======
      regular: 'deň',
>>>>>>> f65d1c32 (Fix all bugs)
      past: 'dňom',
      future: 'deň'
    },
    twoFour: {
<<<<<<< HEAD
      present: '{{count}} dni',
=======
      regular: '{{count}} dni',
>>>>>>> f65d1c32 (Fix all bugs)
      past: '{{count}} dňami',
      future: '{{count}} dni'
    },
    other: {
<<<<<<< HEAD
      present: '{{count}} dní',
=======
      regular: '{{count}} dní',
>>>>>>> f65d1c32 (Fix all bugs)
      past: '{{count}} dňami',
      future: '{{count}} dní'
    }
  },
<<<<<<< HEAD
  xWeeks: {
    one: {
      present: 'týždeň',
      past: 'týždňom',
      future: 'týždeň'
    },
    twoFour: {
      present: '{{count}} týždne',
      past: '{{count}} týždňami',
      future: '{{count}} týždne'
    },
    other: {
      present: '{{count}} týždňov',
      past: '{{count}} týždňami',
      future: '{{count}} týždňov'
    }
  },
  xMonths: {
    one: {
      present: 'mesiac',
=======
  xMonths: {
    one: {
      regular: 'mesiac',
>>>>>>> f65d1c32 (Fix all bugs)
      past: 'mesiacom',
      future: 'mesiac'
    },
    twoFour: {
<<<<<<< HEAD
      present: '{{count}} mesiace',
=======
      regular: '{{count}} mesiace',
>>>>>>> f65d1c32 (Fix all bugs)
      past: '{{count}} mesiacmi',
      future: '{{count}} mesiace'
    },
    other: {
<<<<<<< HEAD
      present: '{{count}} mesiacov',
=======
      regular: '{{count}} mesiacov',
>>>>>>> f65d1c32 (Fix all bugs)
      past: '{{count}} mesiacmi',
      future: '{{count}} mesiacov'
    }
  },
  xYears: {
    one: {
<<<<<<< HEAD
      present: 'rok',
=======
      regular: 'rok',
>>>>>>> f65d1c32 (Fix all bugs)
      past: 'rokom',
      future: 'rok'
    },
    twoFour: {
<<<<<<< HEAD
      present: '{{count}} roky',
=======
      regular: '{{count}} roky',
>>>>>>> f65d1c32 (Fix all bugs)
      past: '{{count}} rokmi',
      future: '{{count}} roky'
    },
    other: {
<<<<<<< HEAD
      present: '{{count}} rokov',
=======
      regular: '{{count}} rokov',
>>>>>>> f65d1c32 (Fix all bugs)
      past: '{{count}} rokmi',
      future: '{{count}} rokov'
    }
  }
};

<<<<<<< HEAD
var formatDistance = function formatDistance(token, count, options) {
=======
function formatDistance(token, count, options) {
  options = options || {};
>>>>>>> f65d1c32 (Fix all bugs)
  var preposition = extractPreposition(token) || '';
  var key = lowercaseFirstLetter(token.substring(preposition.length));
  var scheme = formatDistanceLocale[key];

<<<<<<< HEAD
  if (!(options !== null && options !== void 0 && options.addSuffix)) {
    return prefixPreposition(preposition) + suffixPreposition(preposition) + declension(scheme, count, 'present');
  }

  if (options.comparison && options.comparison > 0) {
=======
  if (!options.addSuffix) {
    return prefixPreposition(preposition) + suffixPreposition(preposition) + declension(scheme, count, 'regular');
  }

  if (options.comparison > 0) {
>>>>>>> f65d1c32 (Fix all bugs)
    return prefixPreposition(preposition) + 'o ' + suffixPreposition(preposition) + declension(scheme, count, 'future');
  } else {
    return prefixPreposition(preposition) + 'pred ' + suffixPreposition(preposition) + declension(scheme, count, 'past');
  }
<<<<<<< HEAD
};

var _default = formatDistance;
exports.default = _default;
=======
}

>>>>>>> f65d1c32 (Fix all bugs)
module.exports = exports.default;